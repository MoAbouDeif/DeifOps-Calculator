aws-load-balancer-controller:
  clusterName: eks-cluster-deifops
  serviceAccount:
    create: true
    name: aws-load-balancer-controller
    annotations:
      eks.amazonaws.com/role-arn: arn:aws:iam::993260646119:role/aws-load-balancer-controller-20250902150740569600000011
  region: eu-central-1
  vpcId: vpc-035a075ab420b5044
  replicaCount: 2
  clusterSecretsPermissions.allowAllSecrets: true
  enableCertManager: false


argo-cd:
  global:
    domain: argocd.deifops.click
  configs:
    params:
      server.insecure: "true"
  server:
    service:
      type: ClusterIP
      servicePortHttp: 80
      targetPort: 8080
      servicePortHttpName: http
    ingress:
      enabled: true
      controller: aws
      ingressClassName: alb
      path: /
      pathType: Prefix
      annotations:
        alb.ingress.kubernetes.io/scheme: internet-facing
        alb.ingress.kubernetes.io/target-type: ip
        alb.ingress.kubernetes.io/backend-protocol: HTTP
        alb.ingress.kubernetes.io/listen-ports: '[{"HTTP":80}, {"HTTPS":443}]'
        alb.ingress.kubernetes.io/ssl-redirect: '443'
        external-dns.alpha.kubernetes.io/hostname: argocd.deifops.click
      aws:
        serviceType: ClusterIP # <- Used with target-type: ip
        backendProtocolVersion: GRPC

nginx-ingress:
  ingress:
    enabled: true
    hostname: '*.deifops.click'
    ingressClassName: alb
    annotations:
      kubernetes.io/ingress.class: alb
      alb.ingress.kubernetes.io/scheme: internet-facing
      alb.ingress.kubernetes.io/target-type: ip
      alb.ingress.kubernetes.io/ssl-redirect: '443'
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}]'
    hosts:
      - host: '*.deifops.click'
        paths: /
