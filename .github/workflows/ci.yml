name: Calculator App Validations and Tests
run-name: 'Calculator App Validations and Tests | Branch = ${{ github.ref_name }}'


on:
  workflow_dispatch:

permissions: 
  id-token: write
  contents: read

jobs:
  frontend-validations:
    runs-on: ubuntu-latest 
    steps:
      - name: code-checkout
        uses: actions/checkout@v4 
      - name: node-setup
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json
      - name: code-validations
        run: |
          cd frontend
          npm ci
          npx htmlhint "**/*.html"
          npm run lint 
          npm run test:ci
  backend_validations:
    runs-on: ubuntu-latest
    defaults:
      run: 
        working-directory: backend/
    steps:
      - name: code-checkout
        uses: actions/checkout@v4 
      - name: python-setup
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
          cache: "pip"
          cache-dependency-path: backend/requirements-dev.txt
      - name: install-dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements-dev.txt
      - name: backend-validations
        run: |
          source venv/bin/activate
          make lint
          make test
  e2e_testing:
    if: ${{ github.event_name == 'pull_request' || (github.event_name == 'push' && (github.ref_name == 'main' || github.ref_name == 'staging')) }}
    runs-on: ubuntu-latest
    needs:
      - frontend-validations
      - backend_validations
    environment: e2e_testing
    env:
      MYSQL_HOST: ${{vars.MYSQL_HOST}}
      MYSQL_DB: ${{vars.MYSQL_DB}}
      MYSQL_USER: ${{vars.MYSQL_USER}}
      MYSQL_PASSWORD: ${{secrets.MYSQL_PASSWORD}}
      SERVER_NAME: ${{vars.SERVER_NAME}}
      FRONTEND_HOST: ${{vars.FRONTEND_HOST}}
      FRONTEND_PORT: ${{vars.FRONTEND_PORT}}
      BACKEND_HOST: ${{vars.BACKEND_HOST}}
      BACKEND_PORT: ${{vars.BACKEND_PORT}}

    steps:
      - name: code-checkout
        uses: actions/checkout@v4 
      - name: python-setup
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
          cache: "pip"
          cache-dependency-path: backend/requirements-dev.txt
      - name: node-setup
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json
      - name: init-mysql-db
        run: |
          sudo systemctl start mysql.service

          until mysqladmin ping -h "localhost" --silent; do
            echo "Waiting for MySQL to be ready..."
            sleep 2
          done
        
          cd database
          envsubst < init.sql.template \
                > init.sql

          envsubst < seed.sql.template \
                          > seed.sql
          
          cat init.sql 

          echo "Applying schema..."
          sudo mysql -h localhost -u root -proot < init.sql
          
          echo "Seeding data..."
          sudo mysql -h localhost -u root -proot < seed.sql
      - name: start-backend
        run: |
          cd backend
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements-dev.txt
          python app.py &
          until curl -s http://localhost:5000/; do
            echo "Waiting for backend..."
            sleep 2
          done
      - name: start-frontend
        run: |
          cd frontend
          npm ci
          npm run start &
          until curl -s http://localhost:3000; do
            echo "Waiting for frontend..."
            sleep 2
          done
      - name: setup-proxy
        run: |
          sudo apt-get install -y nginx
          
          VARS='${SERVER_NAME} ${FRONTEND_HOST} ${FRONTEND_PORT} ${BACKEND_HOST} ${BACKEND_PORT}'
          envsubst "$VARS" < nginx/nginx.conf.template \
          | sudo tee /etc/nginx/conf.d/nginx.conf

          sudo rm -f /etc/nginx/sites-enabled/default
          sudo nginx -t
          sudo systemctl restart nginx
      - name: run e2e tests
        run: |
          cd frontend
          npm run e2e:ci
  build-images:
    if: ${{ github.event_name == 'push' && (github.ref_name == 'main' || github.ref_name == 'staging') }}
    runs-on: ubuntu-latest
    environment: Dev-Build
    needs: 
      - e2e_testing
    env:
      SERVER_NAME: ${{vars.SERVER_NAME}}
      FRONTEND_HOST: ${{vars.FRONTEND_HOST}}
      FRONTEND_PORT: ${{vars.FRONTEND_PORT}}
      BACKEND_HOST: ${{vars.BACKEND_HOST}}
      BACKEND_PORT: ${{vars.BACKEND_PORT}}
      MYSQL_ROOT_PASSWORD: ${{secrets.MYSQL_ROOT_PASSWORD}}
      REACT_APP_API_BASE_URL: ${{vars.REACT_APP_API_BASE_URL}}
      DOCKER_USER: ${{vars.DOCKER_USER}}
      DOCKER_TOKEN: ${{secrets.DOCKER_TOKEN}}
    steps:
      - name: checkout-code
        uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{vars.DOCKER_USER}}
          password: ${{secrets.DOCKER_TOKEN}}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build & Push backend image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.DOCKER_USER }}/backend:${{ github.ref_name }}-v${{ github.run_number }}
          cache-from: type=registry,ref=${{ env.DOCKER_USER }}/backend:cache
          cache-to: type=registry,ref=${{ env.DOCKER_USER }}/backend:cache,mode=max
      - name: pre-build-frontend
        run: |
          VARS='${SERVER_NAME} ${FRONTEND_HOST} ${FRONTEND_PORT} ${BACKEND_HOST} ${BACKEND_PORT}'
          envsubst "$VARS" < frontend/nginx.conf.template \
                                        > frontend/nginx.conf
          cat frontend/nginx.conf
      - name: Build & Push frontend image
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ env.DOCKER_USER }}/frontend:${{ github.ref_name }}-v${{ github.run_number }}
          cache-from: type=registry,ref=${{ env.DOCKER_USER }}/frontend:cache
          cache-to: type=registry,ref=${{ env.DOCKER_USER }}/frontend:cache,mode=max

      # - name: build-backend
      #   run: |
      #     cd backend
      #     export DOCKER_IMAGE=${DOCKER_USER}/backend:${{github.ref_name}}-v${{github.run_number}}
      #     docker build -t ${DOCKER_IMAGE} .
      #     docker login -u ${DOCKER_USER} -p ${DOCKER_TOKEN}
      #     docker push ${DOCKER_IMAGE}
      # - name: build-frontend
      #   run: |
      #     VARS='${SERVER_NAME} ${FRONTEND_HOST} ${FRONTEND_PORT} ${BACKEND_HOST} ${BACKEND_PORT}'
      #     envsubst "$VARS" < frontend/nginx.conf.template \
      #                                   > frontend/nginx.conf
      #     cat frontend/nginx.conf
      #     cd frontend
      #     export DOCKER_IMAGE=${DOCKER_USER}/frontend:${{github.ref_name}}-v${{github.run_number}}
      #     docker build -t ${DOCKER_IMAGE} .
      #     docker login -u ${DOCKER_USER} -p ${DOCKER_TOKEN}
      #     docker push ${DOCKER_IMAGE}
